#!/usr/bin/env php
<?php

use Bow\Support\Resource\Storage;

class Bow
{
    private static $rootDirectory;
    private final function __construct() {}
    private final function __clone() {}
    const BAD_COMMAND = "Bad command.%sPlease type \033[0;32;7m`php bow help or php bow command help` for more information.";
    const PARAM = " Please specified parameter. ";

    /**
     * @param $param
     * @param $cmd
     * @param $argv
     * @return int
     * @throws ErrorException
     */
    private static function verifiedParameter($param, $cmd, $argv)
    {
        if ($param == null) {
            if (!isset($argv[1])) {
                throw new ErrorException(sprintf(self::PARAM));
            }

            if ($argv[1] == 'help') {
                return static::usage($cmd);
            }
        }

        return null;
    }

    /**
     *
     * @param string $root
     * @return int
     * @throws ErrorException
     * @throws Exception
     */
    public static function run($root)
    {
        static::$rootDirectory = $root;
        $argc = --$GLOBALS['argc'];
        $argv = $GLOBALS['argv'];

        array_shift($argv);

        if ($argc <= 0) {
            $argv[0] = "help:null";
        }

        $params = explode(":", $argv[0]);

        if (count($params) == 1) {
            list($cmd, $param) = [$params[0], null];
        } else {
            // formate cmd.
            list($cmd, $param)  = $params;
        }

        $arg = [];

        if (isset($argv[2])) {
            $arg = explode("=", $argv[2], 2);
        }

        // Generate section
        if ($cmd === 'generate') {
            static::verifiedParameter($param, $cmd, $argv);

            if ($param == 'resource') {
                if (!isset($argv[1])) {
                    throw new ErrorException(sprintf(self::PARAM));
                }
                return static::createController($argv[1], true, $arg);
            }

            if ($param == 'key') {
                if (!empty($arg)) {
                    throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
                }
                return static::generateKey();
            }
        }

        // Make section
        if ($cmd === 'make') {
            static::verifiedParameter($param, $cmd, $argv);

            if (!isset($argv[1])) {
                throw new ErrorException(sprintf(self::PARAM));
            }

            $name = $argv[1];

            if ($param == 'model') {
                $tableName = null;
                if (count($arg) == 2) {
                    if ($arg[0] === '--table') {
                        $tableName = $arg[1];
                    } else {
                        throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
                    }
                }
                return static::createModel($name, $tableName);
            }

            if ($param == 'middleware') {
                return static::createMiddleware($name);
            }

            if ($param == 'controller') {
                // Controlleur simple.
                if (empty($arg)) {
                    return static::createController($name, null);
                }
                // Controlleur avec model associer.
                if ($arg[0] == '--with-model') {
                    static::createController($name, null);
                    if (isset($arg[1])) {
                        $name = $arg[1];
                    }
                    return static::createModel($name);
                }
                // Controlleur vide
                if ($arg[0] == '--no-plain') {
                    $r = static::createController($name);
                    if (isset($argv[3])) {
                        $arg = explode('=', $argv[3]);
                        if ($arg[0] === '--with-model') {
                            if (isset($arg[1])) {
                                $name = $arg[1];
                            }
                            return static::createModel($name);
                        }
                    }
                    return $r;
                }

                throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
            }

            throw new ErrorException(sprintf(self::BAD_COMMAND, " [$cmd:$param] "));
        }

        // Migration section
        if ($cmd == 'migrate') {
            if ($param === null) {
                if (isset($argv[1])) {
                    $arg = explode('=', $argv[1]);
                }
                return static::migrate(null, null, $arg);
            }

            static::verifiedParameter($param, $cmd, $argv);
            $filename = $argv[1];

            if ($param == "make") {
                return static::createMigration($filename, $arg);
            }

            if ($param == "up") {
                return static::migrate($filename, "up", $arg);
            }

            if ($param == "down") {
                return static::migrate($filename, "down", $arg);
            }

            if ($param == "rollback") {
                $arg[0] = '--rollback';
                return static::migrate($filename, "down", $arg);
            }

            if (isset($argv[1])) {
                $arg = explode("=", $argv[1], 2);
                if ($arg[0] !== '--seed') {
                    if ($arg[0] == 'help') {
                        return static::usage('migrate');
                    }
                    throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
                }
            }

            throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
        }

        // Help section
        if ($cmd == 'help') {
            return static::usage();
        }

        // Server section
        if ($cmd == 'server') {
            if (isset($argv[1])) {
                if ($argv[1] == 'help') {
                    return static::usage('server');
                }
                $port = (int) $argv[1];
            } else {
                $port = "5000";
            }

            // resource.
            $r = fopen("php://stdout", "w");
            if ($r) {
                fwrite($r, sprintf("[%s] web server start at http://localhost:%s \033[0;31;7mctrl-c for shutdown it\033[00m\n", date('F d Y H:i:s a'), $port));
            }
            fclose($r);
            // lancement du serveur.
            return shell_exec("php -S localhost:$port server.php");
        }

        // Console section
        if ($cmd == 'console') {
            if (isset($argv[1]) && $argv[1] == 'help') {
                return static::usage('console');
            }
            if (!file_exists(static::$rootDirectory . '/vendor/bin/psysh')) {
                echo 'Please type "install psy/psysh:@stable" eg. "composer require psy/psysh:@stable"';
                return 0;
            }

            $shell = new Psy\Shell();
            $shell->setIncludes(['public/index.php']);
            return $shell->run();
        }

        throw new Exception(sprintf(self::BAD_COMMAND, ''));
    }

    /**
     * Create new migrate file
     *
     * @param string $filename
     * @param array $option
     * @throws ErrorException
     * @return null
     */
    private static function createMigration($filename, $option = [])
    {
        $mapMethod = ["create", "drop"];
        $table = $filename;

        if (count($option) == 1) {
            throw new ErrorException(sprintf(self::BAD_COMMAND, ''));
        }

        if (count($option) == 2) {
            $table = $option[1];
            if ($option[0] == "--table") {
                $mapMethod = ["table", "drop"];
            } elseif ($option[0] == "--create") {
                $mapMethod = ["create", "drop"];
            } else {
                throw new ErrorException(sprintf(self::BAD_COMMAND, ' [' . $option[0] . '] '));
            }
        }


        $className = ucfirst($table);
        $migrate = <<<doc
<?php
use \Bow\Database\Migration\Fields;
use \Bow\Database\Migration\Schema;
use \Bow\Database\Migration\Migration;

class Create{$className}Table extends Migration
{
    public static \$table = "$table";

    /**
     * create {$table} table
     *
     * @param bool \$display
     */
    public function up(\$display = false)
    {
        Schema::{$mapMethod[0]}(static::\$table, function(Fields \$table) {
            \$table->increment('id');
            \$table->timestamps();
        });
    }

    /**
     * drop a table {$table}
     */
    public function down()
    {
        Schema::{$mapMethod[1]}(static::\$table);
    }
}
doc;
        if (preg_match("/^[a-z]+$/", $filename)) {
            $filename = "create_{$filename}_table";
        }

        $createAt = date("Y_m_d") . "_" . date("His");
        $file = static::$rootDirectory."/migration/" . $createAt . "_${filename}.php";

        file_put_contents($file, $migrate);

        Storage::append(static::$rootDirectory."/migration/.registers", "{$createAt}_{$filename}|$table\n");

        echo "\033[0;32mmigration file \033[00m[$filename]\033[0;32m created.\033[00m\n";
        return 0;
    }

    /**
     * Make new migrate
     *
     * @param string $table le nom de table
     * @param string $type le type de migration up|down
     * @param string $option le type de migration up|down
     * @return int
     * @throws ErrorException
     */
    private static function migrate($table = null, $type = null, $option = null)
    {
        if ($table) {
            $fileParten = static::$rootDirectory.strtolower("/migration/*{$table}*.php");
        } else {
            $fileParten = static::$rootDirectory.strtolower("/migration/*.php");
        }

        if ($type == null) {
            $type = "up";
        }

        $register = ["file" => [], "tables" => []];

        foreach(file(static::$rootDirectory."/migration/.registers") as $r) {
            $tmp = explode("|", $r);
            $register["file"][] = $tmp[0];
            $register["tables"][] = $tmp[1];
        }

        foreach(glob($fileParten) as $file) {
            if (!file_exists($file)) {
                throw new ErrorException("$file n'existe pas.", E_USER_ERROR);
            }

            $filename = preg_replace("@^(" . static::$rootDirectory."/migration/)|(\.php)$@", "", $file);

            if (in_array($filename, $register["file"])) {
                $num = array_flip($register["file"])[$filename];
                $table = rtrim($register["tables"][$num]);
            }
            require $file;

            $class = "Create".ucfirst($table)."Table";
            $instance = new $class;
            call_user_func([$instance, strtolower($type)]);
            if (isset($option[0]) && $option[0] == "--seed") {
                $n = 1;
                if (isset($option[1])) {
                    $n = $option[1];
                }
                $r = call_user_func_array([$instance, 'fill'], [$n]);
                $s = $r > 1 ? 's' : '';
                echo "\033[0;33m$r\033[00m \033[0;32mseed$s in \033[00m[$table] \033[0;32mmigration\033[00m\n";
            }
        }
        return 0;
    }

    /**
     * Create new middleware file
     *
     * @param $middlewareName
     * @return int
     */
    private static function createMiddleware($middlewareName)
    {
        $middlewareName = ucfirst($middlewareName);

        if (file_exists(static::$rootDirectory."/app/middleware/$middlewareName.php")) {
            echo "\033[0;31mmiddleware \033[0;33m\033[0;31m[$middlewareName]\033[00m\033[0;31m already exist.\033[00m\n";
            return 0;
        }

        $middlewareTemplate = <<<CM
<?php
namespace App\Middleware;

use Bow\Database\Database;

class {$middlewareName}
{
    /**
     * Fonction de lancement du middleware.
     *
     * @param mixed
     * @return boolean
     */
    public function handle()
    {
        \$next = true;
        // do something here
        return \$next;
    }
}
CM;
        file_put_contents(static::$rootDirectory."/app/middleware/$middlewareName.php", $middlewareTemplate);
        echo "\033[0;32mmiddleware \033[00m[{$middlewareName}]\033[0;32m created.\033[00m\n";

        return 0;
    }

    /**
     * Create new controller file
     *
     * @param string $controllerName
     * @param bool $rest
     * @param array $option
     * @return int
     */
    private static function createController($controllerName, $rest = false, $option = [])
    {
        if (!preg_match("/controller$/i", $controllerName)) {
            $controllerName = ucfirst($controllerName) . "Controller";
        } else {
            if (preg_match("/^(.+)(controller)$/", $controllerName, $match)) {
                array_shift($match);
                $controllerName = ucfirst($match[0]) . ucfirst($match[1]);
            } else {
                $controllerName = ucfirst($controllerName);
            }
        }

        $path = preg_replace("/controller/", "", strtolower($controllerName));

        if (file_exists(static::$rootDirectory."/app/controllers/$controllerName.php")) {
            echo "\033[0;31mcontroller \033[0;33m\033[0;31m[$controllerName]\033[00m\033[0;31m already exist.\033[00m\n";
            return 0;
        }

        $controllerTemplate =<<<CC
<?php
namespace App\Controllers;

use Bow\Database\Database;

class {$controllerName} extends Controller
{
    /**
     * Créer une nouvelle instance du controller
     */
    public function __construct()
    {
        \$this->middleware('VerifyToken');
    }

    /**
     * Point d'entré
     *
     * @param mixed \$id [optional] L'identifiant de l'élément à récupérer
     * @return mixed
     */
    public function index(\$id = null)
    {
        // do something here.
    }

    /**
     * Afficher la vue permettant de créer une résource.
     */
    public function create()
    {
        // do something here.
    }

    /**
     * Ajouter une nouvelle résource dans la base d'information
     */
    public function store()
    {
        // do something here.
    }

    /**
     * Récupérer un information précise avec un identifiant.
     *
     * @param mixed \$id [optional] L'identifiant de l'élément à récupérer
     * @return mixed
     */
    public function show(\$id = null)
    {
        // do something here.
    }

    /**
     * Mise à jour d'un résource en utilisant paramètre du GET
     *
     * @param mixed \$id L'identifiant de l'élément à mettre à jour
     * @return mixed
     */
    public function edit(\$id)
    {
        // do something here.
    }

    /**
     * Mise à jour d'une résource
     *
     * @param mixed \$id L'identifiant de l'élément à mettre à jour
     * @return mixed
     */
    public function update(\$id)
    {
        // do something here.
    }

    /**
     * Supprimer une resource
     *
     * @param mixed \$id L'identifiant de l'élément à supprimer
     * @return mixed
     */
    public function destroy(\$id)
    {
        // do something here.
    }
}
CC;
        if ($rest === null) {

            $controllerPlainTemplate =<<<CC
<?php
namespace App\Controllers;

use Bow\Database\Database;

class {$controllerName} extends Controller
{

    // Écrivez votre code ici.

}
CC;
            file_put_contents(static::$rootDirectory."/app/controllers/${controllerName}.php", $controllerPlainTemplate);

        } else if ($rest) {

            $model = ucfirst($path);
            $modelNamespace = '';

            if (static::readline("voulez vous que je crée les vues associées?")) {
                $model = strtolower($model);
                @mkdir(static::$rootDirectory."/app/views/".$model, 0766);

                echo "\033[0;33;7m";
                foreach(["create", "edit", "show", "index", "update", "delete"] as $value) {
                    $file = static::$rootDirectory."/app/views/$model/$value.twig";
                    file_put_contents($file, '{# code here... #}');
                    echo "$file\n";
                }
                echo "\033[00m";
            }

            if (static::readline("voulez vous que je crée un model?")) {
                if (isset($option[0]) && $option[0] == '--model') {
                    if (isset($option[1])) {
                        $model = $option[1];
                    } else {
                        echo "\033[0;32;7mLe nom du model non spécifié --model=model_name.\033[00m\n";
                    }
                }

                static::createModel($model);
                $modelNamespace = "\nuse App\\" . ucfirst($model);

                if (static::readline('voulez vous que je crée une migration pour ce model? ')) {
                    static::createMigration($model);
                }
            }


            $controllerRestTemplate =<<<CC
<?php
namespace App\Controllers;
$modelNamespace
use Bow\Database\Database;

class {$controllerName} extends Controller
{
    /**
     * Créer une nouvelle instance du controller
     */
    public function __construct()
    {
        \$this->middleware("VerifyToken");
    }

    /**
     * Point d'entré
     * GET /$path
     *
     * @param mixed \$id [optional] L'identifiant de l'element à récupérer
     * @return mixed
     */
    public function index(\$id = null)
    {
        // do something here.
    }

    /**
     * Afficher la vue permettant de créer une résource.
     * GET /$path/create
     */
    public function create()
    {
        // do something here.
    }

    /**
     * Ajouter une nouvelle résource dans la base d'information
     * POST /$path
     */
    public function store()
    {
        // do something here.
    }

    /**
     * Récupérer un information précise avec un identifiant.
     * GET /$path/:id
     *
     * @param mixed \$id L'identifiant de l'élément à récupérer
     * @return mixed
     */
    public function show(\$id)
    {
        // do something here.
    }

    /**
     * Mise à jour d'un résource en utilisant paramètre du GET
     * GET /$path/:id/edit
     *
     * @param mixed \$id L'identifiant de l'élément à mettre à jour
     * @return mixed
     */
    public function edit(\$id)
    {
        // do something here.
    }

    /**
     * Mise à jour d'une résource
     * PUT /$path/:id
     *
     * @param mixed \$id L'identifiant de l'élément à mettre à jour
     * @return mixed
     */
    public function update(\$id)
    {
        // do something here.
    }

    /**
     * Supprimer une resource
     * DELETE /$path/:id
     *
     * @param mixed \$id L'identifiant de l'élément à supprimer
     * @return mixed
     */
    public function destroy(\$id)
    {
        // do something here.
    }
}
CC;
            file_put_contents(static::$rootDirectory."/app/controllers/${controllerName}.php", $controllerRestTemplate);
        } else {
            file_put_contents(static::$rootDirectory."/app/controllers/${controllerName}.php", $controllerTemplate);
        }

        echo "\033[0;32mcontroller created \033[00m[{$controllerName}]\033[0;32m\033[00m\n";
        return 0;
    }

    /**
     * Create new model file
     *
     * @param $modelName
     * @param string|null $tableName
     * @return int
     */
    private static function createModel($modelName, $tableName = null)
    {
        $modelName = ucfirst($modelName);
        if (is_string($tableName)) {
            $table = strtolower($tableName);
        } else {
            $table = strtolower($modelName);
        }

        $model = <<<MODEL
<?php
namespace App;

use Bow\Database\Model;

class ${modelName} extends Model
{
    /**
     * Ajoutez les champs à valider ici
     */
    public static \$rules = [
        // insérer ici vos contrainte sur les champs
        // provenant d'un réquête
    ];

    /**
     * Le nom de la table.
     *
     * @var string
     */
    public static \$table = "$table";
}

MODEL;
        if (file_exists(static::$rootDirectory."/app/${modelName}.php")) {
            echo "\033[0;33mmodel \033[0;33m\033[0;31m[${modelName}]\033[00m\033[0;31m already exist.\033[00m\n";
            return 0;
        }

        file_put_contents(static::$rootDirectory."/app/${modelName}.php", $model);

        echo "\033[0;32mmodel created \033[00m[${modelName}]\033[0;32m\033[00m\n";
        return 0;
    }

    /**
     * Read ligne
     *
     * @param string $message
     * @return bool
     */
    private static function readline($message)
    {
        echo "\033[0;32m$message y/N\033[00m >>> ";
        $input = readline();

        if (strtolower($input) == "y") {
            return true;
        }

        if (strtolower($input) == 'n' || $input == '') {
            return false;
        }

        return false;
    }

    /**
     * Display global help or helper command.
     *
     * @param string|null $command
     * @return int
     */
    private static function usage($command = null)
    {
        if ($command === null) {
            $usage = <<<USAGE

Bow usage: php bow command:action [name] [help|--with-model|--no-plain|--create|--table|--seed]

\033[0;31mcommand\033[00m:

 \033[0;33mhelp\033[00m display command helper

 \033[0;32mgenerate\033[00m create a new app key and resources
  option:
   \033[0;33mgenerate:resource\033[00m  Create new REST assicate at a controller
   \033[0;33mgenerate:key\033[00m       Create new app key

 \033[0;32mmake\033[00m                 Create a user class
  option:
   \033[0;33mmake:middleware\033[00m    Create new middleware
   \033[0;33mmake:controller\033[00m    Create new controller
   \033[0;33mmake:model\033[00m         Create new model

 \033[0;32mmigrate\033[00m apply a migration in user model
  option:
   \033[0;33mmigrate:make\033[00m       Create a new migration
   \033[0;33mmigrate:down\033[00m       Drop migration
   \033[0;33mmigrate:up\033[00m         Update or create table of the migration

 \033[0;32mconsole\033[00m show psysh php REPL for debug you code.
 \033[0;32mserver\033[00m run a local web server.

USAGE;
            echo $usage;
            return 0;
        }

        switch($command) {
            case 'help':
                echo "\033[0;33mhelp\033[00m display command helper\n";
                break;
            case 'make':
                echo <<<U
\n\033[0;32mmake\033[00m create a user class\n
    [option]
    --with-model[=name]  Create a model associte at controller
    --no-plain              Create a plain controller

    * you can use --no-plain --with-model

    \033[0;33m$\033[00m php \033[0;34mbow\033[00m make:controller name [option]  For create a new controlleur
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m make:middleware name           For create a new middleware
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m make:model name                For create a new model
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m make help                      For display this

U;

                break;
            case 'generate':

                echo <<<U
    \n\033[0;32mgenerate\033[00m create a resource and app keyn
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m generate:resource name             For create a new REST controller
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m generate:key                       For generate a new APP KEY
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m generate help                      For display this

U;
                break;
            case 'migrate':
                echo <<<U
\n\033[0;32mmigrate\033[00m apply a migration in user model\n
    [option]
    --seed[--seed=n]      Fill table for n value
    --create=table_name   Change name of table
    --table=table_name    Alter migration table

    \033[0;33m$\033[00m php \033[0;34mbow\033[00m migrate:make name [option]     Create a new migration
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m migrate:up name [option]       Up the specify migration
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m migrate:down name              Down migration
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m migrate [option]               Up all defined migration
    \033[0;33m$\033[00m php \033[0;34mbow\033[00m migrate help                   For display this

U;

                break;

            case 'console':
                echo <<<U
\n\033[0;32mconsole\033[00m show psysh php REPL\n
    php bow console
    >>> //test you code here.
U;
                break;
        }

        return 0;
    }

    /**
     * generate key
     *
     * @return integer
     */
    private function generateKey()
    {
        $key = base64_encode(openssl_random_pseudo_bytes(5) . date('Y-m-d H:i:s'));
        file_put_contents(static::$rootDirectory."/config/.key", $key);

        echo "Application key => \033[0;32m$key\033[00m\n";
        return 0;
    }
}

/**
 *
 *  Run generator.
 *
 */
try {
    require __DIR__."/vendor/autoload.php";
    Bow::run(__DIR__);
} catch (Exception $e) {
    echo "\033[0;31;7m {$e->getMessage()} \033[00m\n";
}